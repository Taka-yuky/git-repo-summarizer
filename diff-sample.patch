--- utils/summarize.mjs
+++ utils/summarize.mjs
@@ -3,7 +3,6 @@
 import { execSync } from 'child_process';
 import { promises as fs } from 'fs';
 import path from 'path';
-import mime from 'mime-types';

 // Git管理されたファイルリストを取得
 function getGitFiles(repoPath) {
@@ -35,23 +34,18 @@
   return formatted;
 }

-function isTextFile(filePath) {
-  const mimeType = mime.lookup(filePath);
-  if (mimeType && mimeType.startsWith('text')) {
-    return true;
-  }
-  const textFileExtensions = [
-    '.md',
-    '.yml',
-    '.yaml',
-    '.json',
-    '.jsx',
-    '.js',
-    '.ts',
-    '.py',
-    '.sh',
-    '.html',
-    '.css',
-    '.scss',
-    '.xml',
-    '.java',
-    '.rb',
-    '.php',
-    '.go',
-    '.rs',
-    '.txt',
-    'Dockerfile',
-    'Makefile',
-    '.gitignore',
-    '.editorconfig',
-    '.mjs',
-    '.c',
-    '.cpp',
-    '.h',
-    '.hpp',
-    '.cs',
-    '.swift',
-    '.kt',
-    '.gradle',
-    '.babelrc',
-  ];
-  const ext = path.extname(filePath);
-  return textFileExtensions.includes(ext);
+async function isTextFile(filePath) {
+  try {
+    const content = await fs.readFile(filePath);
+    const maxBytesToCheck = 512;
+    const bytesToCheck = content.slice(0, maxBytesToCheck);
+    for (let i = 0; i < bytesToCheck.length; i++) {
+      if (bytesToCheck[i] === 0) {
+        return false; // binary file
+      }
+    }
+    return true; // text file
+  } catch (err) {
+    console.error(`Error reading file ${filePath}:`, err);
+    return false;
+  }
 }

 export async function generateOutput(repoPath) {
@@ -60,7 +54,7 @@
     if (isIgnored(file)) continue;
     const filePath = path.join(repoPath, file);
     outputText += `#### ${file}\n\n`;

-    if (isTextFile(filePath)) {
+    if (await isTextFile(filePath)) {
       try {
         const content = await fs.readFile(filePath, 'utf-8');
         if (content.length > 100000) {
